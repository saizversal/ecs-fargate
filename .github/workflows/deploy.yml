name: Deploy GraphQL ECS Project

on:
  push:
    branches:
      - main  # Or your deployment branch

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: graphql-ecs-repo
  STACK_NAME: graphql-ecs-stack
  TEMPLATE_FILE: infrastructure.yaml

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          IMAGE_TAG=${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          docker build -t $IMAGE_TAG .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Docker image to ECR
        run: |
          docker push $IMAGE_TAG

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file ${{ env.TEMPLATE_FILE }} \
            --stack-name ${{ env.STACK_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

      - name: Wait for stack deployment to complete
        run: |
          aws cloudformation wait stack-create-complete \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }}

      - name: Output API Endpoint URL
        run: |
          ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" \
            --output text)
          echo "API Gateway endpoint URL: $ENDPOINT"
