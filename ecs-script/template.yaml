AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Fargate with Cloud Map and API Gateway integration

Parameters:
  AWSRegion:
    Type: String
  AWSAccountID:
    Type: String
  ProjectName:
    Type: String
  ECRCluster:
    Type: String
  ECRContainer:
    Type: String
  ECSContainerImageURI:
    Type: String
  ContainerPort:
    Type: Number

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-vpc"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECRCluster
      ServiceConnectDefaults:
        Namespace: !Ref CloudMapNamespace

  CloudMapNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub "${ProjectName}.local"
      Vpc: !Ref VPC

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}"
      RetentionInDays: 7

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities: [FARGATE]
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref ECRContainer
          Image: !Ref ECSContainerImageURI
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWSRegion
              awslogs-stream-prefix: ecs

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: VPCLink
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
          SecurityGroups: [!Ref SecurityGroup]
          AssignPublicIp: ENABLED
      ServiceRegistries:
        - RegistryArn: !GetAtt CloudMapService.Arn
      TaskDefinition: !Ref TaskDefinition

  CloudMapService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Ref ProjectName
      NamespaceId: !Ref CloudMapNamespace
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: WEIGHTED

  VPCLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: !Sub "${ProjectName}-vpc-link"
      SubnetIds: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroupIds: [!Ref SecurityGroup]

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${ProjectName}-http-api"
      ProtocolType: HTTP
      Target: !GetAtt ECSService.ServiceName

Outputs:
  APIEndpoint:
    Description: HTTP API endpoint (will be appended with routes)
    Value: !Sub "https://${HttpApi}.execute-api.${AWSRegion}.amazonaws.com"
